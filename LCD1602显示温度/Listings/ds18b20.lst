C51 COMPILER V9.55   DS18B20                                                               06/20/2020 21:32:23 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\Objects\ds18b20.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ds18b20.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\d
                    -s18b20.lst) TABS(2) OBJECT(.\Objects\ds18b20.obj)

line level    source

   1          #include "ds18b20.h"
   2          
   3          
   4          
   5          unsigned char DS18B20Init()
   6          {
   7   1        unsigned char i;
   8   1        // 首先拉低数据总线
   9   1        DSPORT=0;
  10   1        delay500us(); // 480-960us
  11   1        DSPORT=1;
  12   1        delay80us();  // 不能太大，如果超出了拉低的时间，会被上拉电阻拉高，那么接下来的判断肯定失败。
  13   1        // 判断DS18B20是否拉低数据总线响应
  14   1        // 如果初始化成功 会在15-60us内拉低，并持续60-240us
  15   1        while(DSPORT)
  16   1        {
  17   2          delay10us();
  18   2          i++;
  19   2          if(i>500){
  20   3            return 0; // 5ms未响应
  21   3          }
  22   2        }
  23   1        return 1;
  24   1      }
  25          
  26          void DS18B20WriteByte(unsigned char value)
  27          {
  28   1        unsigned char i=0;
  29   1      
  30   1        for(i=0;i<8;i++){
  31   2          // 写数据前总线拉低15us
  32   2          DSPORT=0;
  33   2          _nop_();
  34   2          DSPORT = value&0x01;    // 小端写
  35   2      
  36   2          // 写完一位 延时最少60us 拉高
  37   2          delay80us();
  38   2          DSPORT=1;
  39   2          //value>>=1;
  40   2          value = value>>1;
  41   2        }
  42   1      }
  43          
  44          unsigned char DS18B20ReadByte()
  45          {
  46   1        unsigned char i=0,j=0,bi=0,byte=0;
  47   1        for(i=0;i<8;i++){
  48   2          // 将数据总线拉低 延时>1us
  49   2          DSPORT=0;
  50   2          _nop_();
  51   2          _nop_();
  52   2          _nop_();
  53   2          // 将数据总线拉高 延时10us
  54   2          DSPORT=1;
C51 COMPILER V9.55   DS18B20                                                               06/20/2020 21:32:23 PAGE 2   

  55   2          delay10us();
  56   2          
  57   2          bi= DSPORT;
  58   2          byte = (byte>>1)|(bi<<7); // 小端读  
  59   2          /*与EEPROM的相反，EEPROM是大端读写 
  60   2          EEPROM读写要么用都用大端，要么都用小端，因为数据是自己写的,
  61   2          只要保持读写端一致即可。
  62   2          而DS18B20读出的数据是DS18B20产生的，从数据总线传出时也是小端，所以这里读取要用小端。
  63   2          */
  64   2          delay60us();
  65   2        }
  66   1      
  67   1        return byte;
  68   1      }
  69          
  70          // 转换温度
  71          void DS18B20ChangeTemp()
  72          {
  73   1        DSPORT=1;
  74   1        DS18B20Init();
  75   1        delayXms(2);
  76   1        DS18B20WriteByte(0xcc);
  77   1        DS18B20WriteByte(0x44);
  78   1      }
  79          
  80          // 读取温度 命令
  81          void DS18B20SendReadComm()
  82          {
  83   1        DSPORT=1;
  84   1        DS18B20Init();
  85   1        delayXms(2);
  86   1        DS18B20WriteByte(0xcc);
  87   1        DS18B20WriteByte(0xbe);
  88   1      }
  89          
  90          // 读取温度值
  91          float DS18B20ReadTemp()
  92          {
  93   1        char H,L;
  94   1        float tmp=0;
  95   1        DS18B20ChangeTemp();
  96   1        DS18B20SendReadComm();
  97   1        L=DS18B20ReadByte();
  98   1        H=DS18B20ReadByte();
  99   1      //  H = 0x0a;
 100   1      //  L = 0xff;
 101   1        tmp=tmp+(H&0x01)*16;
 102   1        H=H>>1;
 103   1        tmp=tmp+(H&0x01)*32;
 104   1        H=H>>1;
 105   1        tmp=tmp+(H&0x01)*64;
 106   1        
 107   1        tmp=tmp+(L&0x01)*0.0625;
 108   1        L = L>>1;
 109   1        tmp=tmp+(L&0x01)*0.125;
 110   1        L = L>>1;
 111   1        tmp=tmp+(L&0x01)*0.25;
 112   1        L = L>>1;
 113   1        tmp=tmp+(L&0x01)*0.5;
 114   1        L = L>>1;
 115   1        tmp=tmp+(L&0x01)*1;
 116   1        L = L>>1;
C51 COMPILER V9.55   DS18B20                                                               06/20/2020 21:32:23 PAGE 3   

 117   1        tmp=tmp+(L&0x01)*2;
 118   1        L = L>>1;
 119   1        tmp=tmp+(L&0x01)*4;
 120   1        L = L>>1;
 121   1        tmp=tmp+(L&0x01)*8;
 122   1        
 123   1        
 124   1        if((H&0xf8)==0xf8){
 125   2          tmp = 0-tmp;
 126   2        }
 127   1        
 128   1        return tmp;
 129   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    883    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
